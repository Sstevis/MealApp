{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stevis\\\\Desktop\\\\Dev\\\\React\\\\2.reactagain\\\\Projects\\\\food-order-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedTotalAmount = state.totalAmount + action.payload.price * action.payload.amount;\n    const existingCartItemIndex = state.items.findIndex(item => {\n      return item.id === action.payload.id;\n    });\n    const updatedItems = state.items.concat(action.payload);\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      payload: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      payload: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Stevis/Desktop/Dev/React/2.reactagain/Projects/food-order-app/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","payload","price","amount","existingCartItemIndex","findIndex","item","id","updatedItems","concat","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB,UAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,OAAP,CAAeC,KAAf,GAAuBJ,MAAM,CAACG,OAAP,CAAeE,MAD5D;AAEA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAAuBC,IAAD,IAAU;AAC5D,aAAOA,IAAI,CAACC,EAAL,KAAYT,MAAM,CAACG,OAAP,CAAeM,EAAlC;AACD,KAF6B,CAA9B;AAIA,UAAMC,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYe,MAAZ,CAAmBX,MAAM,CAACG,OAA1B,CAArB;AACA,WAAO;AAAEP,MAAAA,KAAK,EAAEc,YAAT;AAAuBb,MAAAA,WAAW,EAAEK;AAApC,KAAP;AACD;;AACD,SAAOP,gBAAP;AACD,CAZD;;AAcA,MAAMiB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCtB,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMqB,oBAAoB,GAAIR,IAAD,IAAU;AACrCO,IAAAA,kBAAkB,CAAC;AAAEd,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,OAAO,EAAEK;AAAxB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMS,yBAAyB,GAAIR,EAAD,IAAQ;AACxCM,IAAAA,kBAAkB,CAAC;AAAEd,MAAAA,IAAI,EAAE,QAAR;AAAkBE,MAAAA,OAAO,EAAEM;AAA3B,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMS,WAAW,GAAG;AAClBtB,IAAAA,KAAK,EAAEkB,SAAS,CAAClB,KADC;AAElBC,IAAAA,WAAW,EAAEiB,SAAS,CAACjB,WAFL;AAGlBsB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAMA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzBD;;GAAMT,Y;;KAAAA,Y;AA2BN,eAAeA,YAAf","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.payload.price * action.payload.amount;\r\n    const existingCartItemIndex = state.items.findIndex((item) => {\r\n      return item.id === action.payload.id;\r\n    });\r\n\r\n    const updatedItems = state.items.concat(action.payload);\r\n    return { items: updatedItems, totalAmount: updatedTotalAmount };\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", payload: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", payload: id });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}